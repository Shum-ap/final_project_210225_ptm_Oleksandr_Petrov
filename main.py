# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞
from mysql_connector import (
    search_by_keyword,
    get_genres_and_years,
    search_by_genre_and_year
)
from log_writer import log_search                      # –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ MongoDB
from log_stats import get_recent_searches, get_top_searches  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
from formatter import print_results                   # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Ñ–∏–ª—å–º–æ–≤
from tabulate import tabulate                         # –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü –≤ –∫–æ–Ω—Å–æ–ª–∏


# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ —Ä–∞–∑)
def paginate_search(search_func, log_info, **kwargs):
    offset = 0
    while True:
        results = search_func(offset=offset, **kwargs)         # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print_results(results)                                 # –≤—ã–≤–æ–¥ —Ñ–∏–ª—å–º–æ–≤
        log_search(**log_info, results_count=len(results))     # –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        if len(results) < 10:                                  # –µ—Å–ª–∏ –∫–æ–Ω–µ—Ü ‚Äî –≤—ã—Ö–æ–¥–∏–º
            break
        next_page = input("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 10? (y/n): ")
        if next_page.lower() != 'y':
            break
        offset += 10


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    while True:
        print("\n–ú–µ–Ω—é:")
        print("1. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print("2. –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É")
        print("3. –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ")

        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞
        if choice == '1':
            keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ")
            paginate_search(
                search_by_keyword,
                log_info={"search_type": "keyword", "params": {"keyword": keyword}},
                keyword=keyword
            )

        # –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥–æ–≤–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        elif choice == '2':
            genres, min_year, max_year = get_genres_and_years()
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:")
            print(", ".join(genres))
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {min_year} ‚Äì {max_year}")

            genre = input("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä: ")
            year_from = int(input("–ì–æ–¥ —Å: "))
            year_to = int(input("–ì–æ–¥ –¥–æ: "))

            paginate_search(
                search_by_genre_and_year,
                log_info={
                    "search_type": "genre_year",
                    "params": {"genre": genre, "from": year_from, "to": year_to}
                },
                genre=genre,
                start_year=year_from,
                end_year=year_to
            )

        # –¢–æ–ø-5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–µ –≤ MongoDB)
        elif choice == '3':
            print("\nüìä –¢–æ–ø 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
            top = get_top_searches()

            if not top:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                table = []
                for entry in top:
                    params = entry["_id"]
                    count = entry["count"]

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    if "keyword" in params:
                        query_type = "–ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"
                        query_str = params["keyword"]
                    elif "genre" in params:
                        query_type = "–ü–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É"
                        query_str = f"{params['genre']} ({params['from']}‚Äì{params['to']})"
                    else:
                        query_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                        query_str = str(params)

                    table.append([query_type, query_str, count])

                print(tabulate(table, headers=["–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"], tablefmt="grid"))

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ –¥–∞—Ç–µ)
        elif choice == '4':
            print("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
            recent = get_recent_searches()

            if not recent:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                table = []
                for entry in recent:
                    search_type = entry.get("search_type", "–Ω–µ–∏–∑–≤.")
                    params = entry.get("params", {})
                    count = entry.get("results_count", 0)
                    timestamp = entry.get("timestamp", "-")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if search_type == "keyword":
                        param_str = f"'{params.get('keyword', '')}'"
                    elif search_type == "genre_year":
                        param_str = f"{params.get('genre')} ({params.get('from')}‚Äì{params.get('to')})"
                    else:
                        param_str = str(params)

                    table.append([search_type, param_str, count, timestamp])

                print(tabulate(
                    table,
                    headers=["–¢–∏–ø", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ö–æ–ª-–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–í—Ä–µ–º—è"],
                    tablefmt="grid"
                ))

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        elif choice == '0':
            print("üëã –í—ã—Ö–æ–¥...")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == '__main__':
    main()
