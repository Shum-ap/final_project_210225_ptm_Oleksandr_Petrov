# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from mysql_connector import (
    search_by_keyword,
    get_genres_and_years,
    search_by_genre_and_year
)
from log_writer import log_search
from log_stats import get_recent_searches, get_top_searches
from formatter import print_results
from tabulate import tabulate


# üîÅ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ 10 –∑–∞ —Ä–∞–∑)
def paginate_search(search_func, log_info, **kwargs):
    offset = 0
    while True:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ MySQL
        results = search_func(offset=offset, **kwargs)

        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–ª—å–º–æ–≤
        print_results(results)

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ MongoDB
        log_search(**log_info, results_count=len(results))

        # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —ç—Ç–æ –∫–æ–Ω–µ—Ü
        if len(results) < 10:
            break

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç
        next_page = input("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 10? (y/n): ")
        if next_page.lower() != 'y':
            break
        offset += 10


# üß† –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def main():
    while True:
        print("\n–ú–µ–Ω—é:")
        print("1. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print("2. –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É")
        print("3. –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("4. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()

        # üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        if choice == '1':
            keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip()
            if not keyword:
                print("‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                continue

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –ª–æ–≥–∏—Ä—É–µ–º
            paginate_search(
                search_by_keyword,
                log_info={"search_type": "keyword", "params": {"keyword": keyword}},
                keyword=keyword
            )

        # üéû –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≥–æ–¥–æ–≤
        elif choice == '2':
            genres, min_year, max_year = get_genres_and_years()

            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:")
            print(", ".join(genres))
            print(f"–î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {min_year} ‚Äì {max_year}")

            genre = input("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä: ").strip()
            if genre not in genres:
                print("‚ùå –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª
            try:
                year_from = int(input("–ì–æ–¥ —Å: ").strip())
                year_to = int(input("–ì–æ–¥ –¥–æ: ").strip())
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –≥–æ–¥–æ–≤.")
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if year_from < min_year or year_to > max_year or year_from > year_to:
                print(f"‚ùå –ì–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {min_year}‚Äì{max_year}, –∏ '—Å' ‚â§ '–¥–æ'.")
                continue

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∏ –ª–æ–≥–∏—Ä—É–µ–º
            paginate_search(
                search_by_genre_and_year,
                log_info={
                    "search_type": "genre_year",
                    "params": {"genre": genre, "from": year_from, "to": year_to}
                },
                genre=genre,
                start_year=year_from,
                end_year=year_to
            )

        # üìä –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ MongoDB (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º)
        elif choice == '3':
            print("\nüìä –¢–æ–ø 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
            top = get_top_searches()

            if not top:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                table = []
                for entry in top:
                    params = entry["_id"]
                    count = entry["count"]

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                    if "keyword" in params:
                        query_type = "–ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"
                        query_str = params["keyword"]
                    elif "genre" in params:
                        query_type = "–ü–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É"
                        query_str = f"{params['genre']} ({params['from']}‚Äì{params['to']})"
                    else:
                        query_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                        query_str = str(params)

                    table.append([query_type, query_str, count])

                # –¢–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
                print(tabulate(table, headers=["–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"], tablefmt="grid"))

        # üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ (MongoDB: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        elif choice == '4':
            print("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
            recent = get_recent_searches()

            if not recent:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                table = []
                for entry in recent:
                    search_type = entry.get("search_type", "–Ω–µ–∏–∑–≤.")
                    params = entry.get("params", {})
                    count = entry.get("results_count", 0)
                    timestamp = entry.get("timestamp", "-")

                    # –ß–∏—Ç–∞–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    if search_type == "keyword":
                        param_str = f"'{params.get('keyword', '')}'"
                    elif search_type == "genre_year":
                        param_str = f"{params.get('genre')} ({params.get('from')}‚Äì{params.get('to')})"
                    else:
                        param_str = str(params)

                    table.append([search_type, param_str, count, timestamp])

                print(tabulate(
                    table,
                    headers=["–¢–∏–ø", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ö–æ–ª-–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–í—Ä–µ–º—è"],
                    tablefmt="grid"
                ))

        # ‚ùé –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        elif choice == '0':
            print("üëã –í—ã—Ö–æ–¥...")
            break

        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == '__main__':
    main()
