"""
üé¨ final_project_210225_ptm_Oleksandr_Petrov
–ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤.

–ú–æ–¥—É–ª–∏:
- mysql_connector: –ø–æ–∏—Å–∫ –≤ MySQL
- log_writer: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ MongoDB
- log_stats: –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- formatter: —Ç–∞–±–ª–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ (tabulate)
- config + .env: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# üîß –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from mysql_connector import (
    search_by_keyword,
    get_genres_with_years,
    search_by_genre_and_year
)
from log_writer import log_search
from log_stats import get_recent_searches, get_top_searches
from formatter import format_table  # ‚úÖ –∞–±—Å—Ç—Ä–∞–≥–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
from tabulate import tabulate


# üóÇÔ∏è –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def paginate_search(search_func, log_info, **kwargs):
    """
    –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
    –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é: —Å–ª–µ–¥—É—é—â–∞—è, –ø—Ä–µ–¥—ã–¥—É—â–∞—è, –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É.
    """
    limit = 10
    all_results = []

    # üîç –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    offset = 0
    while True:
        batch = search_func(offset=offset, limit=limit, **kwargs)
        if not batch:
            break
        all_results.extend(batch)
        offset += limit
        if len(batch) < limit:  # –º–µ–Ω—å—à–µ, —á–µ–º –ª–∏–º–∏—Ç ‚Üí –∫–æ–Ω–µ—Ü
            break

    total = len(all_results)
    if total == 0:
        print("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    log_search(**log_info, results_count=total)

    # üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (total + limit - 1) // limit
    current_page = 1

    while True:
        start_idx = (current_page - 1) * limit
        end_idx = start_idx + limit
        page_results = all_results[start_idx:end_idx]

        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤—â–∏–∫
        print(format_table(page_results, page=current_page, total=total, limit=limit))

        try:
            prompt = (
                "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ 'n' ‚Äî —Å–ª–µ–¥—É—é—â–∞—è, "
                + ("'p' ‚Äî –ø—Ä–µ–¥—ã–¥—É—â–∞—è, " if current_page > 1 else "")
                + "'q' ‚Äî –≤—ã—Ö–æ–¥, –∏–ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: "
            )
            user_input = input(prompt).strip().lower()
        except KeyboardInterrupt:
            print("\nüö™ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ—Ä–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...")
            break

        if user_input == 'q':
            print("üö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n")
            break
        elif user_input == 'n' and current_page < total_pages:
            current_page += 1
        elif user_input == 'p' and current_page > 1:
            current_page -= 1
        elif user_input.isdigit():
            page = int(user_input)
            if 1 <= page <= total_pages:
                current_page = page
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")


# üìö –ü–æ–¥–º–µ–Ω—é: –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
def history_submenu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ MongoDB."""
    while True:
        print("\nüìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print("1. üìä –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("2. üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("0. ‚óÄÔ∏è –í—ã–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ: ").strip()

        if choice == '1':
            top = get_top_searches(limit=5)
            if not top:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                table = []
                for entry in top:
                    params = entry["_id"]
                    count = entry["count"]

                    if "keyword" in params:
                        query_type = "–ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"
                        query_str = params["keyword"]
                    elif "genre" in params:
                        query_type = "–ü–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É"
                        query_str = f"{params['genre']} ({params['from']}‚Äì{params['to']})"
                    else:
                        query_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                        query_str = str(params)

                    table.append([query_type, query_str, count])

                print(tabulate(table,
                               headers=["–¢–∏–ø", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ö–æ–ª-–≤–æ"],
                               tablefmt="grid"))

        elif choice == '2':
            recent = get_recent_searches(limit=5)
            if not recent:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            else:
                table = []
                for entry in recent:
                    search_type = entry.get("search_type", "–Ω–µ–∏–∑–≤.")
                    params = entry.get("params", {})
                    count = entry.get("results_count", 0)
                    timestamp = entry.get("timestamp", "-")

                    genre_or_kw = "-"
                    year_range = "-"
                    if search_type == "keyword":
                        genre_or_kw = params.get("keyword", "-")
                    elif search_type == "genre_year":
                        genre_or_kw = params.get("genre", "-")
                        year_range = f"{params.get('from', '?')}‚Äì{params.get('to', '?')}"

                    table.append([search_type, genre_or_kw, year_range, count, timestamp[:19]])

                print(tabulate(table,
                               headers=["–¢–∏–ø", "–ö–ª—é—á", "–ì–æ–¥—ã", "–ù–∞–π–¥–µ–Ω–æ", "–í—Ä–µ–º—è"],
                               tablefmt="grid"))

        elif choice == '0':
            print("üö™ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...\n")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# üß† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –¶–∏–∫–ª –º–µ–Ω—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–≤–æ–¥–∞ –∏ –æ—à–∏–±–æ–∫."""
    print("üìò –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MovieSearch CLI!")

    while True:
        try:
            print("\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            print("1. üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
            print("2. üéûÔ∏è –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—É –≥–æ–¥–æ–≤")
            print("3. üìö –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("0. üõë –í—ã—Ö–æ–¥")

            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()

            if choice == '1':
                keyword = input("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip()
                if not keyword:
                    print("‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                    continue

                paginate_search(
                    search_by_keyword,
                    log_info={"search_type": "keyword", "params": {"keyword": keyword}},
                    keyword=keyword
                )

            elif choice == '2':
                # üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã
                genres = get_genres_with_years()
                if not genres:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤.")
                    continue

                # üñ®Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∂–∞–Ω—Ä–æ–≤
                table = [[i, g, y_min, y_max, cnt] for i, (g, y_min, y_max, cnt) in enumerate(genres, 1)]
                print("\nüé¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:")
                print(tabulate(table,
                               headers=["‚Ññ", "–ñ–∞–Ω—Ä", "–°", "–ü–æ", "–§–∏–ª—å–º–æ–≤"],
                               tablefmt="grid"))

                # üß© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
                genre_input = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞: ").strip()
                selected_genre = None

                if genre_input.isdigit():
                    idx = int(genre_input) - 1
                    if 0 <= idx < len(genres):
                        selected_genre = genres[idx]
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
                        continue
                else:
                    matched = [g for g in genres if g[0].lower() == genre_input.lower()]
                    if matched:
                        selected_genre = matched[0]
                    else:
                        print("‚ùå –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        continue

                genre, min_year, max_year, _ = selected_genre
                print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è '{genre}': {min_year}‚Äì{max_year}")

                # üìÜ –í–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–µ—Ç
                while True:
                    try:
                        from_year = int(input(f"–ì–æ–¥ –æ—Ç ({min_year}): ") or min_year)
                        to_year = int(input(f"–ì–æ–¥ –¥–æ ({max_year}): ") or max_year)
                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
                        continue

                    if from_year > to_year:
                        print("‚ùå '–û—Ç' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ '–î–æ'.")
                    elif from_year < min_year or to_year > max_year:
                        print(f"‚ùå –ì–æ–¥—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {min_year}‚Äì{max_year}.")
                    else:
                        break

                paginate_search(
                    search_by_genre_and_year,
                    log_info={
                        "search_type": "genre_year",
                        "params": {"genre": genre, "from": from_year, "to": to_year}
                    },
                    genre=genre,
                    start_year=from_year,
                    end_year=to_year
                )

            elif choice == '3':
                history_submenu()

            elif choice == '0':
                print("üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è.")
                break

            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ Ctrl+C.")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()