from dotenv import load_dotenv
load_dotenv()

from mysql_connector import (
    search_by_keyword,
    get_genres_with_years,
    search_by_genre_and_year
)
from log_writer import log_search
from log_stats import get_recent_searches, get_top_searches
from formatter import print_results
from tabulate import tabulate

# üîÅ –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
def paginate_search(search_func, log_info, **kwargs):
    offset = 0
    limit = 10
    current_page = 1

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞—Ä–∞–Ω–µ–µ
    all_results = []
    while True:
        batch = search_func(offset=len(all_results), **kwargs)
        if not batch:
            break
        all_results.extend(batch)
        if len(batch) < limit:
            break

    total_results = len(all_results)
    total_pages = (total_results + limit - 1) // limit

    if total_results == 0:
        print("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    while True:
        start_idx = (current_page - 1) * limit
        end_idx = start_idx + limit
        current_batch = all_results[start_idx:end_idx]

        print_results(current_batch, start_index=start_idx + 1)
        log_search(**log_info, results_count=len(current_batch))

        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages} | –ü–æ–∫–∞–∑–∞–Ω–æ {min(end_idx, total_results)} –∏–∑ {total_results}")

        user_input = input(
            "‚û°Ô∏è –í–≤–µ–¥–∏—Ç–µ 'n' ‚Äî —Å–ª–µ–¥—É—é—â–∞—è, 'p' ‚Äî –ø—Ä–µ–¥—ã–¥—É—â–∞—è, 'q' ‚Äî –≤—ã—Ö–æ–¥, –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ").strip().lower()

        if user_input == 'q':
            print("üö™ –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.\n")
            break
        elif user_input == 'n':
            if current_page < total_pages:
                current_page += 1
            else:
                print("üìå –í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        elif user_input == 'p':
            if current_page > 1:
                current_page -= 1
            else:
                print("üìå –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        elif user_input.isdigit():
            page = int(user_input)
            if 1 <= page <= total_pages:
                current_page = page
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        else:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
1

# üß† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    while True:
        print("\n–ú–µ–Ω—é:")
        print("1. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print("2. –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É")
        print("3. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ–ø –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ)")
        print("0. –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()

        # üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        if choice == '1':
            keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip()
            if not keyword:
                print("‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                continue

            paginate_search(
                search_by_keyword,
                log_info={"search_type": "keyword", "params": {"keyword": keyword}},
                keyword=keyword
            )

        # üéû –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É
        elif choice == '2':
            genre_data = get_genres_with_years()  # [(genre, min_year, max_year, count), ...]

            table = []
            for i, (genre, g_min, g_max, count) in enumerate(genre_data):
                table.append([i + 1, genre, g_min, g_max, count])

            print("\nüé¨ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:\n")
            print(tabulate(
                table,
                headers=["‚Ññ", "–ñ–∞–Ω—Ä", "–ì–æ–¥ –æ—Ç", "–ì–æ–¥ –¥–æ", "–§–∏–ª—å–º–æ–≤"],
                tablefmt="grid"
            ))

            genre_input = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∂–∞–Ω—Ä–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: ").strip()
            genre = None
            genre_min, genre_max = None, None

            if genre_input.isdigit():
                index = int(genre_input) - 1
                if 0 <= index < len(genre_data):
                    genre, genre_min, genre_max, _ = genre_data[index]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
                    continue
            else:
                found = next(
                    ((g, g_min, g_max, _) for g, g_min, g_max, _ in genre_data if g.lower() == genre_input.lower()),
                    None
                )
                if found:
                    genre, genre_min, genre_max, _ = found
                else:
                    print("‚ùå –ñ–∞–Ω—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

            print(f"üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞ {genre}: {genre_min}‚Äì{genre_max}")

            try:
                year_from = int(input("–ì–æ–¥ —Å: ").strip())
                year_to = int(input("–ì–æ–¥ –¥–æ: ").strip())
            except ValueError:
                print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞.")
                continue

            if year_from < genre_min or year_to > genre_max or year_from > year_to:
                print(f"‚ùå –ì–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {genre_min}‚Äì{genre_max}, –∏ '—Å' ‚â§ '–¥–æ'.")
                continue

            paginate_search(
                search_by_genre_and_year,
                log_info={
                    "search_type": "genre_year",
                    "params": {"genre": genre, "from": year_from, "to": year_to}
                },
                genre=genre,
                start_year=year_from,
                end_year=year_to
            )

        # üßæ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: —Ç–æ–ø –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ
        elif choice == '3':
            print("\nüìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:")
            print("1. –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            sub_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1 –∏–ª–∏ 2): ").strip()

            if sub_choice == '1':
                print("\nüìä –¢–æ–ø 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
                top = get_top_searches()
                if not top:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
                else:
                    table = []
                    for entry in top:
                        params = entry["_id"]
                        count = entry["count"]

                        if "keyword" in params:
                            query_type = "–ü–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"
                            query_str = params["keyword"]
                        elif "genre" in params:
                            query_type = "–ü–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É"
                            query_str = f"{params['genre']} ({params['from']}‚Äì{params['to']})"
                        else:
                            query_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
                            query_str = str(params)

                        table.append([query_type, query_str, count])

                    print(tabulate(table, headers=["–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"], tablefmt="grid"))

            elif sub_choice == '2':
                print("\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n")
                recent = get_recent_searches()
                if not recent:
                    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
                else:
                    table = []
                    for entry in recent:
                        search_type = entry.get("search_type", "–Ω–µ–∏–∑–≤.")
                        params = entry.get("params", {})
                        count = entry.get("results_count", 0)
                        timestamp = entry.get("timestamp", "-")

                        genre_or_keyword = "-"
                        year_range = "-"
                        if search_type == "keyword":
                            genre_or_keyword = params.get("keyword", "-")
                        elif search_type == "genre_year":
                            genre_or_keyword = params.get("genre", "-")
                            year_range = f"{params.get('from')}‚Äì{params.get('to')}"

                        table.append([search_type, genre_or_keyword, year_range, count, timestamp])

                    print(tabulate(
                        table,
                        headers=["–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞", "–ñ–∞–Ω—Ä / –ö–ª—é—á–µ–≤–æ–µ", "–ì–æ–¥—ã", "–ö–æ–ª-–≤–æ", "–í—Ä–µ–º—è"],
                        tablefmt="grid"
                    ))
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.")

        elif choice == '0':
            print("üëã –í—ã—Ö–æ–¥...")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    main()
